//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Player Control"",
            ""id"": ""d12abd9f-cc8a-4ff6-8ab9-55e943740b94"",
            ""actions"": [
                {
                    ""name"": ""DeltaPos"",
                    ""type"": ""Value"",
                    ""id"": ""6123be2d-ada1-49a6-97fa-e42838c94cc3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OnPointerDown"",
                    ""type"": ""Button"",
                    ""id"": ""7c3a5119-7b5f-4769-86d0-2b725bda3bbd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OnPointerUp"",
                    ""type"": ""Button"",
                    ""id"": ""32908825-f751-4133-bf13-e10146f088b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9af5cc9c-7766-490a-8639-ef480a7760c0"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeltaPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c2ee3d73-b1b8-4646-b888-570d96b35603"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DeltaPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af8d4d22-1823-429c-ad3d-542655f1ca47"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnPointerDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62ad3d09-aa04-4bf5-bf7f-93bb95775736"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnPointerDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d9201bb-1b34-4187-b0ce-806d898ee670"",
                    ""path"": ""<Mouse>/press"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnPointerUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d95edd28-18f9-4071-8c5d-d3ce73f30ee2"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnPointerUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player Control
        m_PlayerControl = asset.FindActionMap("Player Control", throwIfNotFound: true);
        m_PlayerControl_DeltaPos = m_PlayerControl.FindAction("DeltaPos", throwIfNotFound: true);
        m_PlayerControl_OnPointerDown = m_PlayerControl.FindAction("OnPointerDown", throwIfNotFound: true);
        m_PlayerControl_OnPointerUp = m_PlayerControl.FindAction("OnPointerUp", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Control
    private readonly InputActionMap m_PlayerControl;
    private IPlayerControlActions m_PlayerControlActionsCallbackInterface;
    private readonly InputAction m_PlayerControl_DeltaPos;
    private readonly InputAction m_PlayerControl_OnPointerDown;
    private readonly InputAction m_PlayerControl_OnPointerUp;
    public struct PlayerControlActions
    {
        private @PlayerActions m_Wrapper;
        public PlayerControlActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @DeltaPos => m_Wrapper.m_PlayerControl_DeltaPos;
        public InputAction @OnPointerDown => m_Wrapper.m_PlayerControl_OnPointerDown;
        public InputAction @OnPointerUp => m_Wrapper.m_PlayerControl_OnPointerUp;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlActions instance)
        {
            if (m_Wrapper.m_PlayerControlActionsCallbackInterface != null)
            {
                @DeltaPos.started -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnDeltaPos;
                @DeltaPos.performed -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnDeltaPos;
                @DeltaPos.canceled -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnDeltaPos;
                @OnPointerDown.started -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnOnPointerDown;
                @OnPointerDown.performed -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnOnPointerDown;
                @OnPointerDown.canceled -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnOnPointerDown;
                @OnPointerUp.started -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnOnPointerUp;
                @OnPointerUp.performed -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnOnPointerUp;
                @OnPointerUp.canceled -= m_Wrapper.m_PlayerControlActionsCallbackInterface.OnOnPointerUp;
            }
            m_Wrapper.m_PlayerControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DeltaPos.started += instance.OnDeltaPos;
                @DeltaPos.performed += instance.OnDeltaPos;
                @DeltaPos.canceled += instance.OnDeltaPos;
                @OnPointerDown.started += instance.OnOnPointerDown;
                @OnPointerDown.performed += instance.OnOnPointerDown;
                @OnPointerDown.canceled += instance.OnOnPointerDown;
                @OnPointerUp.started += instance.OnOnPointerUp;
                @OnPointerUp.performed += instance.OnOnPointerUp;
                @OnPointerUp.canceled += instance.OnOnPointerUp;
            }
        }
    }
    public PlayerControlActions @PlayerControl => new PlayerControlActions(this);
    public interface IPlayerControlActions
    {
        void OnDeltaPos(InputAction.CallbackContext context);
        void OnOnPointerDown(InputAction.CallbackContext context);
        void OnOnPointerUp(InputAction.CallbackContext context);
    }
}
